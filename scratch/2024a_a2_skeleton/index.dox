/*!

*/

// without this gap between two doxygen definition, the last group does not get
// populated properly for some reason.

/*!
@mainpage  PFMS Assignment 2 - Polymorphism/Inheritance/Classes/Multithreading/Graph Searching/Unit Tests

@section info What the Code Does:

The C++ source files control the motion of an Audi R8 and a Quadcopter in an external ROS-based simulation software known as Gazebo. 
One instance of each vehicle type is spawned onto a grid map and assigned goal locations to move to. Each vehicle possesses a unique steering 
mechanism requiring distinct inputs for control. The Audi R8 employs the Ackerman steering model, manipulating the car's pose using arcs as it 
traverses. In contrast, the Quadcopter is able to move in any and all directions, through moving forward/back and up/down, phasing/drifting
left/right or rotating left/right.

The program's operation is complex, relying on numerous classes and functions. The code structure incorporates functions drawn from two 
interface classes: ControllerInterface and MissionInterface. These abstract classes define pure virtual equivalents of all functions used in their 
derived classes. Through inheritance, these parent classes facilitate the utilization of shared or specific implementations for the different object types, 
either Ackerman or Quadcopter.

@section classes Interface Classes:

@subsection cInterface ControllerInterface

The ControllerInterface class contains all functions that must be implemented in either Controller, Ackerman and/or Quadcopter. The Controller class 
inherits the interface class of ControllerInterface and is also the base class of Ackerman and Quadcopter classes. Therefore part of the assessment involved 
selecting which functions from ControllerInterface could be implemented generically in Controller, and which had to be separated into Ackerman and Quadcopter.
All functions in ControllerInterface are pure virtual and cannot be called directly, therefore, they all need to be successfully implemented in the child classes.
The functions are:

- run()
- status()
- setGoals()
- checkOriginToDestination()
- getPlatformType()
- distanceToGoal()
- timeToGoal()
- setTolerance()
- distanceTravelled()
- timeTravelled()
- getOdometry()
- getObstacles()

These functions have been dividived among the child classes, with most functions able to be implemented in Controller, and only the checkOriginToDestination()
function (and another custom function reachGoals() which is not a part of ControllerInterface, but proved useful as an internal function), being implemented
 in the derived classes, along with the constructors and destructors. However, the Ackerman and Quadcopter classes are themselves derived 
of Controller, meaning that the functions and protected variables declared in the Controller class can also be accessed by Ackerman and SkidSteer.

The only difference between the two platforms is how they calculate reaching the goal (checkOriginToDestination()) and their movements (reachGoals()), hence 
why they were the only two function implemented in the derived classes.

@subsection mInterface MissionInterface

The MissionInterface class, similar to ControllerInterface contains all functions that must be implemented in the Mission class. These functions are declared 
as pure virtual within the interface, meaning they lack implementation and cannot be called directly. Instead, they are overridden and implemented within 
the Mission class. The functions are:

- setGoals()
- run()
- status()
- setMissionObjective()
- getDistanceTravelled()
- getTimeMoving()
- getPlatformAssociation()

@section obj Description of Mission Objectives:

This assessments has three different levels or objectives to run Mission, BASIC, ADVANCED and SUPER. In BASIC MODE, the mission simply directs 
the platforms through the supplied goals without optimizing the path. ADVANCED MODE requires the mission to determine an optimal path for each 
platform, minimizing the total distance traveled to visit the goals. SUPER MODE involves using the Quadcopter to survey obstacles and plan a 
path for the Ackerman through a maze. However, as SUPER mode provided extra marks, on top of ADVANCED (100%), I only completed BASIC and ADVANCED objectives, 
not SUPER. In more detail:

@subsection basic BASIC Mode

In BASIC mode, the mission planning involves passing goals to platforms (Quadcopter and Ackerman) for execution. Upon calling the run function, 
both platforms simultaneously execute the goals in separate threads. They compute the distance needed to travel to reach the supplied goals and 
have status functions indicating if they are idle or running. The mission status function returns the percentage of completed mission based on the 
distance traveled by both platforms compared to the total required distance. An estimate of total distance traveled is updated as the platforms 
approach goals.

@subsection adv ADVANCED Mode

In ADVANCED mode, mission planning involves determining the ordering of goals for each platform to ensure all goals are visited only once. A graph 
search, specifically the traveling salesman problem, is suggested for computing the ordering. The derived order and association of goals are obtained 
using the getPlatformGoalAssociation function for testing purposes. Once the ordering is determined, the goals are passed to the platforms for execution. 
The behavior of platforms and mission execution remains the same as in BASIC mode after goal assignment.

@section run How to Run the Code (main.cpp):

To start the simulation, students need to run a command: 
@code
ros2 launch gazebo_tf a2.launch.py 
@endcode
This will launch gazebo and spawn in an Audi R8 (Ackerman) and the Quadcopter to be controlled. Within the simulation is also obstacles (boxes) which can 
be seen through the cameras on both the Audi and Quadcopter, with the outlines shown as collision detections in RVIS on Gazebo. 

@image html startupSim.png 
@image html AudiQuad.png

Once running, open a new terminal in the assessment build directory, and run the main.cpp ('a2' executable) test like so:
@code
./test/a2
@endcode
You can also run the other executable tests for this assessment by replacing 'a2' with the executable name you wish to run, out of these:

- testAudiReachGoals
- testQuadcopterReachGoals
- testMissionReachGoals
- testTspReachGoalsAck
- testTspReachGoalsQuad

The main.cpp file (or 'a2' executable) will read in the goal files supplied
for the Ackerman and Quadcopter, creating instances of the platforms, a Mission object, and sets the objectives (BASIC, ADVANCED, SUPER) for the mission. 
The tolerance for an acceptable amrgin to the reaching the goal is set to 0.5m for both controllers.
The setGoals() function is called twice, once for each platform. The run() function in Mission executes the mission, with the execution of 
run() for each platform being non-blocking, utilising multithreading. Progress can be checked by calling the status function in Mission every 200ms.

@section expect What to Expect:

When the program starts running, both the Audi and Quadcopter will start moving to their respective first goals. As they move, they leave a trail of coordinate 
axes, indicating chanes in position and orientation (pose) as it travels to the goal. 

@image html Starting.png

The Audi is set to accelerate with a 0.2 throttle, remaining at that speed 
until 2m away from the goal point. At that point the Audi will start to brake at 5800Nm until it reaches the specified goal tolerance (0.5m), and then it will
apply the maximum brake torque (8000Nm) until it comes to a halt. The Audi will then continue this process onto the next goal, and follow this pattern
for the rest of the goals provided.

The Quadcopter also has a set speed at which is travels which is 1m/s in all directions. That is 1m/s forward/back, and 1m/s left and right. The chosen 
method of controlling the Quadcopter is purely through moving either positive or negative in all three axes. The x-axis representing forward/back, y-axis 
representing left/right, and z-axis representing up/down. No rotation occurs throughout the control of the platform, except for the slight rotations caused 
by the physics within the simulator. The Quadcopter is able to recalculate it's angle to the current goal and so if able to correct it's path from the initial
trajectory as it often has an initial error. 

@image html Halfway.png

The progress of the Mission is being tracked through outputs in the terminal as a percentage distance travelled of the total mission distance. The first 
number is for the Quadcopter (first or zeroth position in the controllers vector) and the second is for the Audi. Once both status checks have reached 100%,
the program will terminate successfully. 

@image html NearingFinish.png

@image html Progress.png

@n By Dyandra Prins
@n Dyandra.L.Prins@student.uts.edu.au

*/
