/*!

*/

// without this gap between two doxygen definition, the last group does not get
// populated properly for some reason.

/*!
@mainpage PFMS Assignment 1 - Polymorphism/Inheritance/Classes/ROSGazebo

The objective of Assignment 1 is to demonstrate proficiency in C++ programming using object-oriented concepts, 
particularly focusing on abstraction, encapsulation, inheritance, and polymorphism. Students are tasked with writing a 
program that embodies these principles, with a specific emphasis on utilizing classes, functions, pointers, and abstraction 
concepts, through programming two different Controller platforms, inheriting from one base class. 

The assessment will be utilising a physics simulator, Gazebo, and the two provided interface classes, MissionInterface and ControllerInterface, 
to stipulate the functionality of Mission and Controller classes, respectively. I am then required to develop two ground vehicle platforms: 
the Audi R8 with Ackerman Steering and the Husky with Skid Steer, using knowledge of polymorphism to split up the ControllerInterface functions
into either the base class with the one function able to be used for both platforms, or in the derived classes, if there is a need for differing 
internal calculations within the functions. Additionally, the Mission class should inherit from MissionInterface and implement its functions accordingly.

The assessment criteria encompass several aspects, including exploiting abstraction through encapsulation, inheritance, and polymorphism. All I/O should 
be directed solely to the terminal from main.cpp, while modular software development practices should be employed with appropriate class declarations, definitions, 
and naming conventions. It's imperative to ensure correct implementation of methods from ControllerInterface and MissionInterface, avoiding 
code duplication and promoting functionality reusability.

@subsection section1 Platform - Ackerman (Audi R8):
The Audi R8 serves as a vehicle equipped with Ackerman Steering, a sophisticated system designed to enhance maneuverability and stability. The Control Mechanisms are:
- Brake: The platform's braking system operates within a range from 0 to MAX BRAKE TORQUE, allowing for precise control over deceleration.
- Throttle: Throttle control ranges from 0 to 1.0, with recommended usage for the assignment set at 0.1. This throttle setting corresponds to a vehicle top speed of 2.91m/s.
- Steering: Steering control spans from -MAX STEER ANGLE to +MAX STEER ANGLE, with a steering ratio of 17.3 and a lock-to-lock revs of 3.2. The maximum steering angle is determined by the 
formula M_PI * LOCK_TO_LOCK_REVS / STEERING_RATIO. The Audi R8's track width is 1.638 meters, and its wheelbase measures 2.65 meters.

For ease of calculations, as the programming for Ackerman style steering can get complex, we are given an audi library with two functions:
- checkOriginToDestination, which checks if the goal is reachable from the current position, returning distance, time and estimated final goal pose, and
- compute Steering, which is very useful for calculating the required steering angle to reach the goal (within the Max Steering Ange limits).

Movement Strategy: To ensure controlled movement, a throttle of 0.1 (2.91m/s) is recommended for turning until the platform approaches its goal. 
Gradual braking to achieve the desired stopping within specified tolerances.

@subsection section2 Platform - SkidSteer (Huksy):
The Husky is a different ground vehicle eqped with SkidSteering control, which allows for precise movements and navigation. The Control Mechanisms are:
- Turn on Spot: Control for turning on the spot is provided, ranging from -1.0 to 1.0 m/s. Positive values indicate turning left, while negative values indicate turning right.
- Forward/Backward Movement: Control for forward and backward movement ranges from -1.0 to 1.0 rad/sÂ², with positive values indicating forward motion.

Calculations for distance and time must be done manually, as we do not have a library like Ackerman does. The logic for calculations are relatively simple, just calculating the rotaional distance 
and time then the straight motion (forward) and adding them together. 

Movement Strategy: The function of reachGoal first computes and executes the turning distance (left or right depending on where the goal is relative to the platform yaw) at 1.0rad/s, and once 
platform is facing goal, move forward at 1.0m/s until it approaches within a tolerance, slowing down when it gets closer to the goal. 

@subsection section3 Running Program
To run program, first ensure pipes is setup and accessible (41012 pfms-support GitHub), as well as having Gazebo installed and ready. Then start up simulation by running this line in terminal:

    ros2 launch gazebo_tf audi_husky.launch.py

Once running, open a new terminal in the assessment build directory, and run the tests like so:

    ./test/testAudi

, replacing 'testAudi' with the executable name you wish to run.

Between tests, run the following service reset to reset models and world within Gazebo:

    ros2 service call /reset_world std_srvs/srv/Empty

All provided unit tests (testAudi, testAudiReachGoals, testHusky, testHuskyReachGoals, testMission) currently pass, however, if they do not pass when running, 
please make sure to try restart the simulation ('Ctrl + C' in the gazebo launch terminal) before running the test again. This issue, usually occurs with Husky tests.
I have removed all outputs to terminal, save for the current odometry readings as these have been shown to not be accurate, and so, whilst testing, please take care to 
observe if the read() function in pfmsConnector (out of my control) is giving the correct odometry readings.

Running the program should simply consist of creating the object of the controller (or multiple objects of platforms, asl can be different platforms), and then using the function setGoal() to 
first check if a user specified goal is reachable by the platform. Note, Ackerman is limited by the max steering angle, however SkidSteer is able to move to any goal, due to its 'rotate on spot
and then move' functionality. Once the goal is set, reachGoal() can then be run to compute and execute the actions to move to the goal. The platforms will both reduce in speed approaching 
the goal point and then the program wil terminate once goal has been reached. 

The distance and time from the goal can be retrieved through running distanceToGoal() and timeToGoal() functions, with total distance and time through distanceTravelled() and timeInMotion().



@n By Dyandra Prins
@n Dyandra.L.Prins@student.uts.edu.au

*/
